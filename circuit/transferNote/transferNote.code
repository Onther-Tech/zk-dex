import "../sha/1024bitPacked.code" as sha256

// Note = (_owner, _value, _type, _senderViewingKey, _salt, _isSmart)

// oh0 + oh1 : old note hash
// pk0 + pk1 : old note's owner
// oVal : old note value
// oType : old note type
// ovk0 + ovk1 : old note viewKey
// oSalt : old note salt, random value
// oIsSmart : old note isSmart, 0 if is not smart note

// n0h0 + n0h1 : new note 0 hash
// rpk0 + rpk1 : reciever(new note 0 owner)
// n0Val : new note 0 value
// n0Type : new note 0 type
// n0vk0 + n0vk1 : new note 0 viewKey
// n0Salt : new note 0 salt
// n0IsSmart : new note 0 isSmart, 0 if is not smart note

// n1h0 + n1h1 : new note 1 hash
// n1rpk0 + n1rpk1 : reciever2(new note 2 owner)
// n1Val : new note 1 value
// n1Type : new note 1 type
// n1vk0+ n1vk1 : new note 1 viewKey
// 1Salt : new note 1 salt
// n1IsSmart : new note 1 isSmart, 0 if is not smart note

// originH0 + originH1 : origin note hash
// originPk0 + originPk1 : origin note's owner
// originVal : origin note value
// originType : origin note type
// originVk0 + originVk1 : origin note viewKey
// originSalt : origin note salt, random value
// originIsSmart : origin note isSmart, it should be 0. Note that you cannot make smartNote from smartNote



def main(field oh0, field oh1, private field pk0, private field pk1, private field oVal, private field oType, private field ovk0, private field ovk1, private field oSalt, private field oIsSmart, field n0h0, field n0h1, private field rpk0, private field rpk1, private field n0Val, private field n0Type, private field n0vk0, private field n0vk1, private field n0Salt, private field n0IsSmart, field n1h0, field n1h1, private field n1rpk0, private field n1rpk1, private field n1Val, private field n1Type, private field n1vk0, private field n1vk1, private field n1Salt, private field n1IsSmart, field originH0, field originH1, private field originPk0, private field originPk1, private field originVal, private field originType, private field originVk0, private field originVk1, private field originSalt, private field originIsSmart) -> (field):

  oVal == n0Val + n1Val

  // get public key corresponding to private key
  // circuit for above hasn't been implemented as yet, so directly using the private key for PoC

  // check o1
  h = sha256([pk0, pk1, oVal, oType, ovk0, ovk1, oSalt, oIsSmart])
  oh0 == h[0]
  oh1 == h[1]

  // originNote should not be smartNote
  originIsSmart == 0

  // check origin of o1
  h = sha256([originPk0, originPk1, originVal, originType, originVk0, originVk1, originSalt, originIsSmart])
  originH0 == h[0]
  originH1 == h[1]

  field pk0T = if oIsSmart > 0 then originH0 else pk0 fi 
  field pk1T = if oIsSmart > 0 then originH1 else pk1 fi
  pk0 == pk0T
  pk1 == pk1T

  // check n0
  h = sha256([rpk0, rpk1, n0Val, n0Type, n0vk0, n0vk1, n0Salt, n0IsSmart])
  n0h0 == h[0]
  n0h1 == h[1]

  // check n1
  h = sha256([n1rpk0, n1rpk1, n1Val, n1Type, n1vk0, n1vk1, n1Salt, n1IsSmart])
  n1h0 == h[0]
  n1h1 == h[1]

  return 1
