import "../sha/1024bitPacked.code" as sha256
import "../utils/math/add.code" as add
import "../utils/isSmart.code" as isSmart
import "../utils/ownership/verifyOwnership.code" as verifyOwnership


// Note = (owner, value, type, viewKey, salt)

// (public) oh0 + oh1 : old note hash
// (private) oOwner0 + oOwner1 : old note address
// (private) oVal : old note value
// (private) oType : old note type
// (private) ovk0 + ovk1 : old note viewKey
// (private) oSalt : old note salt, random value
// (private) oIsSmart : old note isSmart, 0 if is not smart note
// (private) sk : secret key corresponding to address

// (public) n0h0 + n0h1 : new note 0 hash
// (private) nOwner0 + nOwner1 : new note 0 address
// (private) n0Val : new note 0 value
// (private) n0Type : new note 0 type
// (private) n0vk0 + n0vk1 : new note 0 viewKey
// (private) n0Salt : new note 0 salt

// (public) n1h0 + n1h1 : new note 1 hash
// (private) n1Owner0 + n1Owner1 : new note 1 address
// (private) n1Val : new note 1 value
// (private) n1Type : new note 1 type
// (private) n1vk0+ n1vk1 : new note 1 viewKey
// (private) n1Salt : new note 1 salt

// (public) originH0 + originH1 : origin note hash
// (private) originOwner0 + originOwner1 : origin note address
// (private) originVal : origin note value
// (private) originType : origin note type
// (private) originVk0 + originVk1 : origin note viewKey
// (private) originSalt : origin note salt, random value


def main(field oh0, field oh1, private field oOwner0, private field oOwner1, private field oVal, private field oType, private field ovk0, private field ovk1, private field oSalt, private field sk, \
field n0h0, field n0h1, private field nOwner0, private field nOwner1, private field n0Val, private field n0Type, private field n0vk0, private field n0vk1, private field n0Salt, \
field n1h0, field n1h1, private field n1Owner0, private field n1Owner1, private field n1Val, private field n1Type, private field n1vk0, private field n1vk1, private field n1Salt, \
field originH0, field originH1, private field originOwner0, private field originOwner1, private field originVal, private field originType, private field originVk0, private field originVk1, private field originSalt) -> (field):
  
  // check ownership of old note
  field oIsSmart = isSmart(oOwner0)
  field address = if oIsSmart == 1 then originOwner1 else oOwner1 fi
  field isOwner = verifyOwnership(sk, address)
  isOwner == 1

  // check old note
  h = sha256([oOwner0, oOwner1, oVal, oType, ovk0, ovk1, oSalt])
  oh0 == h[0]
  oh1 == h[1]

  oVal == add(n0Val, n1Val)

  field oOwner0Exp = if oIsSmart == 1 then originH0 else oOwner0 fi
  field oOwner1Exp = if oIsSmart == 1 then originH1 else oOwner1 fi
  oOwner0 == oOwner0Exp
  oOwner1 == oOwner1Exp

  // check origin of old note
  h = sha256([originOwner0, originOwner1, originVal, originType, originVk0, originVk1, originSalt])
  originH0 == h[0]
  originH1 == h[1]

  // check new note 0
  h = sha256([nOwner0, nOwner1, n0Val, n0Type, n0vk0, n0vk1, n0Salt])
  n0h0 == h[0]
  n0h1 == h[1]

  // check new note 1
  h = sha256([n1Owner0, n1Owner1, n1Val, n1Type, n1vk0, n1vk1, n1Salt])
  n1h0 == h[0]
  n1h1 == h[1]

  return 1