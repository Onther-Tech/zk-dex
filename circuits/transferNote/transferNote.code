import "../utils/math/add.code" as add
import "../sha/1536bitPacked.code" as sha256
import "ecc/proofOfOwnership.code" as proofOfOwnership
import "ecc/babyjubjubParams.code" as babyjubjubParams


// Note = (owner, value, type, viewKey, salt)

// (public) o0h0 + o0h1 : old note 0 hash
// (private) o0owner0 + o0owner1 : old note 0 address
// (private) o0val : old note 0 value
// (private) o0type : old note 0 type
// (private) o0vk0 + o0vk1 : old note 0 viewKey
// (private) o0salt : old note 0 salt, random value

// (public) o1h0 + o1h1 : old note 1 hash
// (private) o1owner0 + o1owner1 : old note 1 address
// (private) o1val : old note 1 value
// (private) o1type : old note 1 type
// (private) o1vk0 + o1vk1 : old note 1 viewKey
// (private) o1salt : old note 1 salt, random value

// (public) nh0 + nh1 : new note hash
// (private) nOwner0 + nOwner1 : new note address
// (private) nVal : new note 0 value
// (private) nType : new note 0 type
// (private) nVk0 + nVk1 : new note 0 viewKey
// (private) nSalt : new note 0 salt

// (public) changeH0 + changeH1 : change note hash
// (private) changeOwner0 + changeOwner1 : change note address
// (private) changeVal : change note value
// (private) changeType : change note type
// (private) changeVk0+ changeVk1 : change note viewKey
// (private) changeSalt : change note salt

// (private) sk : secret key corresponding to address of old notes


def main(field o0h0, field o0h1, private field o0owner0, private field o0owner1, private field o0val, private field o0type, private field o0vk0, private field o0vk1, private field o0salt, \
field o1h0, field o1h1, private field o1owner0, private field o1owner1, private field o1val, private field o1type, private field o1vk0, private field o1vk1, private field o1salt, \
field nh0, field nh1, private field nOwner0, private field nOwner1, private field nVal, private field nType, private field nVk0, private field nVk1, private field nSalt, \
field changeH0, field changeH1, private field changeOwner0, private field changeOwner1, private field changeVal, private field changeType, private field changeVk0, private field changeVk1, private field changeSalt, private field sk) -> (field):
  
  // check ownership of old note
  field[10] params = babyjubjubParams()
  field isOwner = proofOfOwnership([o0owner0, o0owner1], sk, params)
  isOwner == 1
  o0owner0 == o1owner0
  o0owner1 == o1owner1

  // check value
  field inputValue = add(o0val, o1val)
  field outputValue = add(nVal, changeVal)
  inputValue == outputValue

  // check type
  o0type == o1type
  o1type == nType
  nType == changeType

  // check old note 0
  h = sha256([o0owner0, o0owner1, o0val, o0type, o0vk0, o0vk1, o0salt])
  o0h0 == h[0]
  o0h1 == h[1]

  // check old note 1
  h = sha256([o1owner0, o1owner1, o1val, o1type, o1vk0, o1vk1, o1salt])
  o1h0 == h[0]
  o1h1 == h[1]

  // check new note
  h = sha256([nOwner0, nOwner1, nVal, nType, nVk0, nVk1, nSalt])
  nh0 == h[0]
  nh1 == h[1]

  // check change note
  h = sha256([changeOwner0, changeOwner1, changeVal, changeType, changeVk0, changeVk1, changeSalt])
  changeH0 == h[0]
  changeH1 == h[1]

  return 1