import "../sha/1024bitPacked.code" as sha256
import "ecc/babyjubjubParams.code" as babyjubjubParams
import "ecc/proofOfOwnership.code" as verifyOwnership

// Note = (_owner, _value, type, _senderViewingKey, _salt, _isSmart)

// o = parentNote
// n = takerNoteToMaker

// (public) oh0 + oh1 : old note hash
// (public) oType : old note type
// (private) pk0 + pk1 : old note public key
// (private) oVal : old note value
// (private) ovk0 + ovk1 : old note viewKey
// (private) oSalt : old note salt, random value
// (private) oIsSmart : old note isSmart, 0 if is not smart note
// (private) sk : secret key corresponding to pk0, pk1

// (public) n0h0 + n0h1 : new note 0 hash
// (public) n0Type : new note 0 type
// (public) rpk0 + rpk1 : reciever public key (should be makerNote.hash)
// (private) n0Val : new note 0 value
// (private) n0vk0 + n0vk1 : new note 0 viewKey
// (private) n0Salt : new note 0 salt
// (private) n0IsSmart : new note 0 isSmart, 0 if is not smart note

def main(field oh0, field oh1, field oType, private field pk0, private field pk1, private field oVal, private field ovk0, private field ovk1, private field oSalt, private field oIsSmart, private field sk, field nh0, field nh1, field nType, field rpk0, field rpk1, private field nVal, private field nvk0, private field nvk1, private field nSalt, private field nIsSmart) -> (field):
  // check ownership of note
  field[10] params = babyjubjubParams()
  field[2] pk = [pk0, pk1]
  field isOwner = verifyOwnership(pk, sk, params)
  isOwner == 1
  
  oVal == nVal

  h = sha256([pk0, pk1, oVal, oType, ovk0, ovk1, oSalt, oIsSmart])
  oh0 == h[0]
  oh1 == h[1]

  h = sha256([rpk0, rpk1, nVal, nType, nvk0, nvk1, nSalt, nIsSmart])
  nh0 == h[0]
  nh1 == h[1]

  field bit = if nIsSmart > 0 then 1 else 0 fi
  bit == 1

  return 1