import "../sha/1024bitPacked.code" as sha256
import "../utils/isSmart.code" as isSmart
import "../utils/ownership/verifyOwnership.code" as verifyOwnership

// Note = (owner, value, type, viewKey, salt)

// o = parentNote
// n = takerNoteToMaker

// (public) oh0 + oh1 : old note hash
// (private) owner0 + owner1 : old note address
// (private) oVal : old note value
// (public) oType : old note type
// (private) ovk0 + ovk1 : old note viewKey
// (private) oSalt : old note salt
// (private) sk : secret key corresponding to address

// (public) nh + nh : new note hash
// (public) nOwner0 + nOwner1 : new owner address (should be makerNote.hash)
// (private) nVal : new note value
// (public) nType : new note type
// (private) nvk0 + nvk1 : new note viewKey
// (private) nSalt : new note salt

def main(field oh0, field oh1, private field owner0, private field owner1, private field oVal, field oType, private field ovk0, private field ovk1, private field oSalt, private field sk, \
field nh0, field nh1, field nOwner0, field nOwner1, private field nVal, field nType, private field nvk0, private field nvk1, private field nSalt) -> (field):
  // check ownership of note
  field isOwner = verifyOwnership(sk, owner1)
  isOwner == 1
  
  oVal == nVal

  h = sha256([owner0, owner1, oVal, oType, ovk0, ovk1, oSalt])
  oh0 == h[0]
  oh1 == h[1]

  h = sha256([nOwner0, nOwner1, nVal, nType, nvk0, nvk1, nSalt])
  nh0 == h[0]
  nh1 == h[1]

  field nIsSmart = isSmart(nOwner0)
  nIsSmart == 1

  return 1