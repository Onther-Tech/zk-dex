import "../sha/1536bitPacked.code" as sha256
import "../utils/isSmart.code" as isSmart
import "ecc/proofOfOwnership.code" as proofOfOwnership
import "ecc/babyjubjubParams.code" as babyjubjubParams

// Note = (owner, value, type, viewKey, salt)

// (public) smartH0 + smartH1 : smartNote hash
// (private) smartOwner0, smartOwner1 : smartNote owner pubkey
// (private) smartValue : smartNote value
// (private) smartType : smartNote type
// (private) smartVk0 + smartVk1 : smartNote viewKey
// (private) smartSalt : smartNote salt, random value

// (public) originH0 + originH1 : originNote hash -- to be private
// (private) originOwner0, originOwner1 : originNote owner pubkey
// (private) originValue : originNote value
// (private) originType : originNote type
// (private) originVk0 + originVk1 : originNote viewKey
// (private) originSalt : originNote salt, random value

// (public) nh0 + nh1 : note hash
// (private) nOwner0, nOwner1 : note owner pubkey
// (private) nValue : note value
// (private) nType : note type
// (private) nVk0 + nVk1 : note viewKey
// (private) nSalt : note salt, random value

// (private) sk : secret key corresponding to originOwner

// smartNote is converted to common note

def main(\
field smartH0, field smartH1, private field smartOwner0, private field smartOwner1, private field smartValue, private field smartType, private field smartVk0, private field smartVk1, private field smartSalt, \
field originH0, field originH1, private field originOwner0, private field originOwner1, private field originValue, private field originType, private field originVk0, private field originVk1, private field originSalt, \
field nh0, field nh1, private field nOwner0, private field nOwner1, private field nValue, private field nType, private field nVk0, private field nVk1, private field nSalt, private field sk) -> (field):
  // smartNote should be smartNote
  isSmart(smartOwner0, smartOwner1) == 1

  // check ownership of note
  smartOwner0 == originH0
  smartOwner1 == originH1
  field[10] params = babyjubjubParams()
  // TODO: activate
  proofOfOwnership([originOwner0, originOwner1], sk, params) == 1

  // check value
  smartValue == nValue

  // check type
  smartType == nType

  h = sha256([smartOwner0, smartOwner1, smartValue, smartType, smartVk0, smartVk1, smartSalt])
  h[0] == smartH0
  h[1] == smartH1

  h = sha256([originOwner0, originOwner1, originValue, originType, originVk0, originVk1, originSalt])
  h[0] == originH0
  h[1] == originH1

  h = sha256([nOwner0, nOwner1, nValue, nType, nVk0, nVk1, nSalt])
  h[0] == nh0
  h[1] == nh1

  return 1